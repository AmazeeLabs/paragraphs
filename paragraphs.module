<?php

/**
 * @file
 * Contains paragraphs.module
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\paragraphs\Entity\ParagraphsType;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\NestedArray;

define('PARAGRAPHS_DEFAULT_TITLE', 'Paragraph');
define('PARAGRAPHS_DEFAULT_TITLE_PLURAL', 'Paragraphs');
define('PARAGRAPHS_DEFAULT_EDIT_MODE', 'open');
define('PARAGRAPHS_DEFAULT_ADD_MODE', 'select');
define('PARAGRAPHS_DEFAULT_FORM_DISPLAY_MODE', 'default');

/**
 * Implements hook_help().
 */

function paragraphs_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the paragraphs module.
    case 'help.page.paragraphs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Paragraphs') . '</p>';
      return $output;
    break;
  }
}

function paragraphs_type_get_types() {
  return ParagraphsType::loadMultiple();
}

function paragraphs_type_get_names() {
  return array_map(function ($bundle_info) {
    return $bundle_info['label'];
  }, \Drupal::entityManager()->getBundleInfo('paragraphs_type'));
}

function paragraphs_type_load($name) {
  return ParagraphsType::load($name);
}

/**
 * Validate helper to have support for other entity reference widgets.
 *
 * @param $element
 * @param FormStateInterface $form_state
 * @param $form
 */
function paragraphs_bundle_validate($element, FormStateInterface $form_state, $form) {
  $values = &$form_state->getValues();
  $element_values = NestedArray::getValue($values, $element['#parents']);
  $bundle_options = array();

  if ($element_values) {
    $enabled = 0;
    foreach ($element_values as $machine_name => $bundle_info) {
      if (isset($bundle_info['enabled']) && $bundle_info['enabled']) {
        $bundle_options[$machine_name] = $machine_name;
        $enabled++;
      }
    }

    // All disabled = all enabled.
    if ($enabled === 0) {
      foreach ($element_values as $machine_name => $bundle_info) {
        $bundle_options[$machine_name] = $machine_name;
      }
    }
  }

  // New value parents.
  $parents = array_merge(array_slice($element['#parents'], 0, -1), array('target_bundles'));
  NestedArray::setValue($values, $parents, $bundle_options);
}